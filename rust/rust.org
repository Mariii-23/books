#+TITLE: Rust

<<<<<<< HEAD
* Introduction
=======
>>>>>>> b909de45011e2cfc4b47866fb0e7e45996b0b292

* Common Programming Concepts
** Variables and Mutability
By default variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable.
When a variable is immutable, once a value is bound to a name, you can‚Äôt change that value.

#+begin_SRC rust
fn main() {
    let x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+end_SRC

Correct:


#+begin_SRC rust
fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+end_SRC

*** Differences Between Variables and Constants

*** Shadowing
 Rustaceans say that the first variable is shadowed by the second, which means that the second variable‚Äôs value is what appears when the variable is used


#+begin_SRC rust
fn main() {
    let x = 5;

    let x = x + 1;

    let x = x * 2;

    println!("The value of x is: {}", x);
}
#+end_SRC

** Data Types
Keep in mind that Rust is a statically typed language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it.
*** Scalar Types
A scalar type represents a single value. Rust has four primaty scalar types: integers, floating-point numbers, Booleans and characters.
*** Integer Types
An integer is a number without a fractional component.
This type declaration indicates that the value it‚Äôs associated with should be an unsigned integer (signed integer types start with i, instead of u) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, i16) can be used to declare the type of an integer value.

| Length  | Signed | Unsigned |
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

Each variant can be either signed or unsigned and has an explicit size. Signed and unsigned refer to whether it‚Äôs possible for the number to be negative‚Äîin other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It‚Äôs like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign. Signed numbers are stored using two‚Äôs complement representation.

Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where n is the number of bits that variant uses. So an i8 can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a u8 can store numbers from 0 to 28 - 1, which equals 0 to 255.

Additionally, the isize and usize types depend on the kind of computer your program is running on: 64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit architecture.

*** Integer Overflow

    Let‚Äôs say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur. Rust has some interesting rules involving this behavior. When you‚Äôre compiling in debug mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we‚Äôll discuss panics in more depth in the ‚ÄúUnrecoverable Errors with panic!‚Äù section in Chapter 9.

    When you‚Äôre compiling in release mode with the --release flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two‚Äôs complement wrapping. In short, values greater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum of the values the type can hold. In the case of a u8, 256 becomes 0, 257 becomes 1, and so on. The program won‚Äôt panic, but the variable will have a value that probably isn‚Äôt what you were expecting it to have. Relying on integer overflow‚Äôs wrapping behavior is considered an error.

    To explicitly handle the possibility of overflow, you can use these families of methods that the standard library provides on primitive numeric types:

      -  Wrap in all modes with the wrapping_* methods, such as wrapping_add
      - Return the None value if there is overflow with the checked_* methods
      - Return the value and a boolean indicating whether there was overflow with the overflowing_* methods
      - Saturate at the value's minimum or maximum values with saturating_* methods
*** Floating-Point Types
Rust also has two primitive types for floating-point numbers, which are numbers with decimal points. Rust‚Äôs floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively. The default type is f64 because on modern CPUs it‚Äôs roughly the same speed as f32 but is capable of more precision.
#+begin_src rust
fn main() {
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32
}
#+end_src
Floating-point numbers are represented according to the IEEE-754 standard. The f32 type is a single-precision float, and f64 has double precision.

*** Numeric operations
#+begin_src rust
fn main() {
    // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95.5 - 4.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56.7 / 32.2;

    // remainder
    let remainder = 43 % 5;
}
#+end_src
*** The Boolean Types

#+begin_src rust
fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}
#+end_src
*** The Character Types
#+begin_src rust
fn main() {
    let c = 'z';
    let z = '‚Ñ§';
    let heart_eyed_cat = 'üòª';
}
#+end_src
Rust‚Äôs char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human intuition for what a ‚Äúcharacter‚Äù is may not match up with what a char is in Rust. We‚Äôll discuss this topic in detail in ‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù in Chapter 8.
*** Compound Types
Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.
**** The Tuple Types
A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.

We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don‚Äôt have to be the same. We‚Äôve added optional type annotations in this example:

#+begin_src rust
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
}
#+end_src
The variable tup binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:

#+begin_src rust
fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {}", y);
}
#+end_src

This program first creates a tuple and binds it to the variable tup. It then uses a pattern with let to take tup and turn it into three separate variables, x, y, and z. This is called destructuring, because it breaks the single tuple into three parts. Finally, the program prints the value of y, which is 6.4.

In addition to destructuring through pattern matching, we can access a tuple element directly by using a period (.) followed by the index of the value we want to access. For example:
#+begin_src rust
fn main() {
    let x: (i32, f64, u8) = (500, 6.4, 1);

    let five_hundred = x.0;

    let six_point_four = x.1;

    let one = x.2;
}
#+end_src
*** The Array Type
Another way to have a collection of multiple values is with an array. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.

#+begin_src rust
fn main() {
    let a = [1, 2, 3, 4, 5];
}
#+end_src
Arrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter 4) or when you want to ensure you always have a fixed number of elements. An array isn‚Äôt as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you‚Äôre unsure whether to use an array or a vector, you should probably use a vector. Chapter 8 discusses vectors in more detail.


#+begin_src rust
fn main() {
let a: [i32; 5] = [1, 2, 3, 4, 5];
}
#+end_src
Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.

Writing an array‚Äôs type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:
#+begin_src rust
fn main() {
let a = [3; 5];
}
#+end_src
The array named a will contain 5 elements that will all be set to the value 3 initially. This is the same as writing let a = [3, 3, 3, 3, 3]; but in a more concise way.
**** Invalid Array Element Access

#+begin_src rust
use std::io;

fn main() {
    let a = [1, 2, 3, 4, 5];

    println!("Please enter an array index.");

    let mut index = String::new();

    io::stdin()
        .read_line(&mut index)
        .expect("Failed to read line");

    let index: usize = index
        .trim()
        .parse()
        .expect("Index entered was not a number");

    let element = a[index];

    println!(
        "The value of the element at index {} is: {}",
        index, element
    );
}
#+end_src

The program resulted in a runtime error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn't execute the final println! statement. When you attempt to access an element using indexing, Rust will check that the index you‚Äôve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can't possibly know what value a user will enter when they run the code later.

This is the first example of Rust‚Äôs safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust‚Äôs error handling.
** Functions
Rust code uses snake case as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words.
Function definitions in Rust start with fn and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.

Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere.
*** Function Parameters
#+begin_src rust
fn main() {
    another_function(5);
}

fn another_function(x: i32) {
    println!("The value of x is: {}", x);
}
#+end_src

In function signatures, you must declare the type of each parameter. This is a deliberate decision in Rust‚Äôs design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.

#+begin_src rust
fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1
    };

    println!("The value of y is: {}", y);
}
#+end_src

This expression:
#+begin_src rust
{
    let x = 3;
    x + 1
}
#+end_src
is a block that, in this case, evaluates to 4. That value gets bound to y as part of the let statement. Note the x + 1 line without a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.
*** Function with Return Values
Functions can return values to the code that calls them. We don‚Äôt name return values, but we do declare their type after an arrow (->). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly.

#+begin_src rust
fn five() -> i32 {
    5
}

fn main() {
    let x = five();

    println!("The value of x is: {}", x);
}
#+end_src
** Comments
#+begin_src rust
// hello, world
 let lucky_number = 7; // I‚Äôm feeling lucky today
/*  ola, ola
 ,ola
 ,uiii deuu*/
#+end_src
** Control Flow
Deciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are if expressions and loops.
*** if Expressions
#+begin_src rust
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}
#+end_src
**** Using if in a let Statement
#+begin_src rust
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {}", number);
}
#+end_src
*** Repetition with Loops
**** Repetition Code with loop
The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.
#+begin_src rust
fn main() {
    loop {
        println!("again!");
    }
}
#+end_src
You can break the loop with a break.
**** Returning Values from Loops
you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:
#+begin_src rust
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}
#+end_src

#+RESULTS:
: The result is 20
**** Conditional Loops with while
#+begin_src rust
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{}!", number);

        number -= 1;
    }

    println!("LIFTOFF!!!");
}
#+end_src

#+RESULTS:
: 3!
: 2!
: 1!
: LIFTOFF!!!
**** Looping Through a Collection with for
You could use the while construct to loop over the elements of a collection, such as an array
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("the value is: {}", a[index]);

        index += 1;
    }
}
#+end_src
All five array values appear in the terminal, as expected. Even though index will reach a value of 5 at some point, the loop stops executing before trying to fetch a sixth value from the array.

But this approach is error prone; we could cause the program to panic if the index length is incorrect. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.
As a more concise alternative, you can use a for loop and execute some code for each item in a collection. A for loop looks like the code in Listing 3-5.
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a.iter() {
        println!("the value is: {}", element);
    }
}
#+end_src

Here‚Äôs what the countdown would look like using a for loop and another method we‚Äôve not yet talked about, rev, to reverse the range:
#+begin_src rust
fn main(){
    for number in (1..5).rev(){
        println!("{}",number);
    }
}
#+end_src

#+RESULTS:
: 4
: 3
: 2
: 1
* Some notes
** Documentation provided by all of dependencies locally
 You won‚Äôt just know which traits to use and which methods and functions to call from a crate. Instructions for using a crate are in each crate‚Äôs documentation. Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser. If you‚Äôre interested in other functionality in the rand crate, for example, run cargo doc --open and click rand in the sidebar on the left.
