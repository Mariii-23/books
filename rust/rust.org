#+TITLE: Rust

* Introduction

* Common Programming Concepts
** Variables and Mutability
By default variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable.
When a variable is immutable, once a value is bound to a name, you can‚Äôt change that value.

#+begin_SRC rust
fn main() {
    let x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+end_SRC

Correct:


#+begin_SRC rust
fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}
#+end_SRC

*** Differences Between Variables and Constants

*** Shadowing
 Rustaceans say that the first variable is shadowed by the second, which means that the second variable‚Äôs value is what appears when the variable is used


#+begin_SRC rust
fn main() {
    let x = 5;

    let x = x + 1;

    let x = x * 2;

    println!("The value of x is: {}", x);
}
#+end_SRC

** Data Types
Keep in mind that Rust is a statically typed language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it.
*** Scalar Types
A scalar type represents a single value. Rust has four primaty scalar types: integers, floating-point numbers, Booleans and characters.
*** Integer Types
An integer is a number without a fractional component.
This type declaration indicates that the value it‚Äôs associated with should be an unsigned integer (signed integer types start with i, instead of u) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, i16) can be used to declare the type of an integer value.

| Length  | Signed | Unsigned |
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

Each variant can be either signed or unsigned and has an explicit size. Signed and unsigned refer to whether it‚Äôs possible for the number to be negative‚Äîin other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It‚Äôs like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign. Signed numbers are stored using two‚Äôs complement representation.

Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where n is the number of bits that variant uses. So an i8 can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a u8 can store numbers from 0 to 28 - 1, which equals 0 to 255.

Additionally, the isize and usize types depend on the kind of computer your program is running on: 64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit architecture.

*** Integer Overflow

    Let‚Äôs say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, integer overflow will occur. Rust has some interesting rules involving this behavior. When you‚Äôre compiling in debug mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we‚Äôll discuss panics in more depth in the ‚ÄúUnrecoverable Errors with panic!‚Äù section in Chapter 9.

    When you‚Äôre compiling in release mode with the --release flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two‚Äôs complement wrapping. In short, values greater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum of the values the type can hold. In the case of a u8, 256 becomes 0, 257 becomes 1, and so on. The program won‚Äôt panic, but the variable will have a value that probably isn‚Äôt what you were expecting it to have. Relying on integer overflow‚Äôs wrapping behavior is considered an error.

    To explicitly handle the possibility of overflow, you can use these families of methods that the standard library provides on primitive numeric types:

      -  Wrap in all modes with the wrapping_* methods, such as wrapping_add
      - Return the None value if there is overflow with the checked_* methods
      - Return the value and a boolean indicating whether there was overflow with the overflowing_* methods
      - Saturate at the value's minimum or maximum values with saturating_* methods
*** Floating-Point Types
Rust also has two primitive types for floating-point numbers, which are numbers with decimal points. Rust‚Äôs floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively. The default type is f64 because on modern CPUs it‚Äôs roughly the same speed as f32 but is capable of more precision.
#+begin_src rust
fn main() {
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32
}
#+end_src
Floating-point numbers are represented according to the IEEE-754 standard. The f32 type is a single-precision float, and f64 has double precision.

*** Numeric operations
#+begin_src rust
fn main() {
    // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95.5 - 4.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56.7 / 32.2;

    // remainder
    let remainder = 43 % 5;
}
#+end_src
*** The Boolean Types

#+begin_src rust
fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}
#+end_src
*** The Character Types
#+begin_src rust
fn main() {
    let c = 'z';
    let z = '‚Ñ§';
    let heart_eyed_cat = 'üòª';
}
#+end_src
Rust‚Äôs char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive. However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human intuition for what a ‚Äúcharacter‚Äù is may not match up with what a char is in Rust. We‚Äôll discuss this topic in detail in ‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù in Chapter 8.
*** Compound Types
Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.
**** The Tuple Types
A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.

We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don‚Äôt have to be the same. We‚Äôve added optional type annotations in this example:

#+begin_src rust
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
}
#+end_src
The variable tup binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:

#+begin_src rust
fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {}", y);
}
#+end_src

This program first creates a tuple and binds it to the variable tup. It then uses a pattern with let to take tup and turn it into three separate variables, x, y, and z. This is called destructuring, because it breaks the single tuple into three parts. Finally, the program prints the value of y, which is 6.4.

In addition to destructuring through pattern matching, we can access a tuple element directly by using a period (.) followed by the index of the value we want to access. For example:
#+begin_src rust
fn main() {
    let x: (i32, f64, u8) = (500, 6.4, 1);

    let five_hundred = x.0;

    let six_point_four = x.1;

    let one = x.2;
}
#+end_src
*** The Array Type
Another way to have a collection of multiple values is with an array. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.

#+begin_src rust
fn main() {
    let a = [1, 2, 3, 4, 5];
}
#+end_src
Arrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter 4) or when you want to ensure you always have a fixed number of elements. An array isn‚Äôt as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you‚Äôre unsure whether to use an array or a vector, you should probably use a vector. Chapter 8 discusses vectors in more detail.


#+begin_src rust
fn main() {
let a: [i32; 5] = [1, 2, 3, 4, 5];
}
#+end_src
Here, i32 is the type of each element. After the semicolon, the number 5 indicates the array contains five elements.

Writing an array‚Äôs type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:
#+begin_src rust
fn main() {
let a = [3; 5];
}
#+end_src
The array named a will contain 5 elements that will all be set to the value 3 initially. This is the same as writing let a = [3, 3, 3, 3, 3]; but in a more concise way.
**** Invalid Array Element Access

#+begin_src rust
use std::io;

fn main() {
    let a = [1, 2, 3, 4, 5];

    println!("Please enter an array index.");

    let mut index = String::new();

    io::stdin()
        .read_line(&mut index)
        .expect("Failed to read line");

    let index: usize = index
        .trim()
        .parse()
        .expect("Index entered was not a number");

    let element = a[index];

    println!(
        "The value of the element at index {} is: {}",
        index, element
    );
}
#+end_src

The program resulted in a runtime error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn't execute the final println! statement. When you attempt to access an element using indexing, Rust will check that the index you‚Äôve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can't possibly know what value a user will enter when they run the code later.

This is the first example of Rust‚Äôs safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust‚Äôs error handling.
** Functions
Rust code uses snake case as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words.
Function definitions in Rust start with fn and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.

Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere.
*** Function Parameters
#+begin_src rust
fn main() {
    another_function(5);
}

fn another_function(x: i32) {
    println!("The value of x is: {}", x);
}
#+end_src

In function signatures, you must declare the type of each parameter. This is a deliberate decision in Rust‚Äôs design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.

#+begin_src rust
fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1
    };

    println!("The value of y is: {}", y);
}
#+end_src

This expression:
#+begin_src rust
{
    let x = 3;
    x + 1
}
#+end_src
is a block that, in this case, evaluates to 4. That value gets bound to y as part of the let statement. Note the x + 1 line without a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.
*** Function with Return Values
Functions can return values to the code that calls them. We don‚Äôt name return values, but we do declare their type after an arrow (->). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly.

#+begin_src rust
fn five() -> i32 {
    5
}

fn main() {
    let x = five();

    println!("The value of x is: {}", x);
}
#+end_src
** Comments
#+begin_src rust
// hello, world
 let lucky_number = 7; // I‚Äôm feeling lucky today
/*  ola, ola
 ,ola
 ,uiii deuu*/
#+end_src
** Control Flow
Deciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are if expressions and loops.
*** if Expressions
#+begin_src rust
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}
#+end_src
**** Using if in a let Statement
#+begin_src rust
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {}", number);
}
#+end_src
*** Repetition with Loops
**** Repetition Code with loop
The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.
#+begin_src rust
fn main() {
    loop {
        println!("again!");
    }
}
#+end_src
You can break the loop with a break.
**** Returning Values from Loops
you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:
#+begin_src rust
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}
#+end_src

#+RESULTS:
: The result is 20
**** Conditional Loops with while
#+begin_src rust
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{}!", number);

        number -= 1;
    }

    println!("LIFTOFF!!!");
}
#+end_src

#+RESULTS:
: 3!
: 2!
: 1!
: LIFTOFF!!!
**** Looping Through a Collection with for
You could use the while construct to loop over the elements of a collection, such as an array
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("the value is: {}", a[index]);

        index += 1;
    }
}
#+end_src
All five array values appear in the terminal, as expected. Even though index will reach a value of 5 at some point, the loop stops executing before trying to fetch a sixth value from the array.

But this approach is error prone; we could cause the program to panic if the index length is incorrect. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.
As a more concise alternative, you can use a for loop and execute some code for each item in a collection. A for loop looks like the code in Listing 3-5.
#+begin_src rust
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a.iter() {
        println!("the value is: {}", element);
    }
}
#+end_src

Here‚Äôs what the countdown would look like using a for loop and another method we‚Äôve not yet talked about, rev, to reverse the range:
#+begin_src rust
fn main(){
    for number in (1..5).rev(){
        println!("{}",number);
    }
}
#+end_src

#+RESULTS:
: 4
: 3
: 2
: 1

* Ownership
** What is ownership

#+begin_src rust
fn main() {
    {                      // s is not valid here, it‚Äôs not yet declared
        let s = "hello";   // s is valid from this point forward

        // do stuff with s
    }                      // this scope is now over, and s is no longer valid
}
#+end_src
There is a natural point at which we can return the memory our String needs to the allocator: when s goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called drop, and it‚Äôs where the author of String can put the code to return the memory. Rust calls drop automatically at the closing curly bracket.

This kind of string can be mutated:
#+begin_src rust
fn main() {
    let mut s = String::from("hello");

    s.push_str(", world!"); // push_str() appends a literal to a String

    println!("{}", s); // This will print `hello, world!`
}
#+end_src

#+RESULTS:
: hello, world!
*** Memory and allocation

Earlier, we said that when a variable goes out of scope, Rust automatically calls the drop function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.

To ensure memory safety, there‚Äôs one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers s1 to no longer be valid and, therefore, Rust doesn‚Äôt need to free anything when s1 goes out of scope. Check out what happens when you try to use s1 after s2 is created; it won‚Äôt work:

#+begin_src rust
fn main() {
    let s1 = String::from("hello");
    let s2 = s1;

    println!("{}, world!", s1);
}
#+end_src

That solves our problem! With only s2 valid, when it goes out of scope, it alone will free the memory, and we‚Äôre done.
In addition, there‚Äôs a design choice that‚Äôs implied by this: Rust will never automatically create ‚Äúdeep‚Äù copies of your data. Therefore, any automatic copying can be assumed to be inexpensive in terms of runtime performance.


*** Ways Variables and Data Interact: Clone
If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone. We‚Äôll discuss method syntax in Chapter 5, but because methods are a common feature in many programming languages, you‚Äôve probably seen them before.

#+begin_src rust
fn main() {
    let s1 = String::from("hello");
    let s2 = s1.clone();

    println!("s1 = {}, s2 = {}", s1, s2);
}
#+end_src

#+RESULTS:
: s1 = hello, s2 = hello
So what types implement the Copy trait? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can implement Copy, and nothing that requires allocation or is some form of resource can implement Copy. Here are some of the types that implement Copy:

   - All the integer types, such as u32.
   - The Boolean type, bool, with values true and false.
   - All the floating point types, such as f64.
   - The character type, char.
   - Tuples, if they only contain types that also implement Copy. For example, (i32, i32) implements Copy, but (i32, String) does not.
*** Ownership and Functions
The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing 4-3 has an example with some annotations showing where variables go into and out of scope.
#+begin_src rust
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it's okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
#+end_src

*** Return Values and Scope
Returning values can also transfer ownership.

#+begin_src rust
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
  // moved, so nothing happens. s1 goes out of scope and is dropped.

fn gives_ownership() -> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("hello"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// takes_and_gives_back will take a String and return one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}
#+end_src

The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless the data has been moved to be owned by another variable.

Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It‚Äôs quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.

It‚Äôs possible to return multiple values using a tuple.

#+begin_src rust
fn main() {
    let s1 = String::from("hello");

    let (s2, len) = calculate_length(s1);

    println!("The length of '{}' is {}.", s2, len);
}

fn calculate_length(s: String) -> (String, usize) {
    let length = s.len(); // len() returns the length of a String

    (s, length)
}
#+end_src
But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called references.

** References and Borrowing
Here is how you would define and use a calculate_length function that has a reference to an object as a parameter instead of taking ownership of the value:
#+begin_src rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
#+end_src
[[./2021-07-04_20-30.png][reference]]
Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, *.

We call having references as function parameters borrowing. As in real life, if a person owns something, you can borrow it from them. When you‚Äôre done, you have to give it back.

So what happens if we try to modify something we‚Äôre borrowing?
#+begin_src rust
fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string.push_str(", world");
}
#+end_src
it doesn‚Äôt work!
Just as variables are immutable by default, so are references. We‚Äôre not allowed to modify something we have a reference to.

** Mutable References

#+begin_src rust
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}
#+end_src
First, we had to change s to be mut. Then we had to create a mutable reference with &mut s and accept a mutable reference with some_string: &mut String.

But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:
#+begin_src rust
fn main() {
    let mut s = String::from("hello");

    let r1 = &mut s;
    let r2 = &mut s;

    println!("{}, {}", r1, r2);
}
#+end_src
** The slide Type
Another data type that does not have ownership is the slice. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.

*** String Slices
A string slice is a reference to part of a String, and it looks like this:
#+begin_src rust
fn main() {
    let s = String::from("hello world");

    let hello = &s[0..5];
    // it is the same
    let hello = &s[..5];

    let world = &s[6..11];
    // it is the same
    let world = &s[6..s.len()];
    // it is the same
    let world = &s[6..];
}
#+end_src
Note: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the ‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù section of Chapter 8.


#+begin_src rust
fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
#+end_src
When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.
We now have a straightforward API that‚Äôs much harder to mess up, because the compiler will ensure the references into the String remain valid.

* Using Structs to Structure Related Data
#+begin_src rust
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}


fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}

fn main() {
    let user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };


    let user2 = build_user(
        String::from("someone@example.com"),
        String::from("someusername123"),
    );
}
#+end_src

#+begin_src rust
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

fn main() {
    let user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    let user2 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        active: user1.active,
        sign_in_count: user1.sign_in_count,
    };

    // ouuu
    let user2 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        ..user1
    };
}
#+end_src
*** Using Tuple Structs without Named Fields to Create Different Types
#+begin_src rust
fn main() {
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}
#+end_src
*** Unit-Like Structs Without Any Fields
You can also define structs that don‚Äôt have any fields! These are called unit-like structs because they behave similarly to (), the unit type. Unit-like structs can be useful in situations in which you need to implement a trait on some type but don‚Äôt have any data that you want to store in the type itself.
** Example
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {:?}\n", rect1);
    println!("rect1 is {:#?}", rect1);
}
#+end_src

#+RESULTS:
: rect1 is Rectangle { width: 30, height: 50 }
:
: rect1 is Rectangle {
:     width: 30,
:     height: 50,
: }

** Method Syntax
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}
#+end_src

#+RESULTS:
: The area of the rectangle is 1500 square pixels.

*** Methods with More Parameters

#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };

    println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
    println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
}
#+end_src

#+RESULTS:
: Can rect1 hold rect2? true
: Can rect1 hold rect3? false
*** Associated Functions
They are called associated functions because ther are associated with the string. They‚Äôre still functions, not methods, because they don‚Äôt have an instance of the struct to work with.
Associated functions are often used for constructors that will return a new instance of the struct. For example, we could provide an associated function that would have one dimension parameter and use that as both width and height, thus making it easier to create a square Rectangle rather than having to specify the same value twice:
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size,
            height: size,
        }
    }
}

fn main() {
    let sq = Rectangle::square(3);
}
#+end_src
To call this associated function, we use the :: syntax with the struct name

*** Multiple impl Blocks
Each struct is allowed to have multiple impl blocks. For example, Listing 5-15 is equivalent to the code shown in Listing 5-16, which has each method in its own impl block.
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}
#+end_src
There‚Äôs no reason to separate these methods into multiple impl blocks here, but this is valid syntax.

* Enums and Pattern Matching

#+begin_src rust
enum IpAddrKind {
    V4,
    V6,
}

fn main() {
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;

    route(IpAddrKind::V4);
    route(IpAddrKind::V6);
}

fn route(ip_kind: IpAddrKind) {}
#+end_src

#+begin_src rust
fn main() {
    enum IpAddrKind {
        V4,
        V6,
    }

    struct IpAddr {
        kind: IpAddrKind,
        address: String,
    }

    let home = IpAddr {
        kind: IpAddrKind::V4,
        address: String::from("127.0.0.1"),
    };

    let loopback = IpAddr {
        kind: IpAddrKind::V6,
        address: String::from("::1"),
    };
}
#+end_src
 OR
#+begin_src rust
fn main() {
    enum IpAddr {
        V4(String),
        V6(String),
    }

    let home = IpAddr::V4(String::from("127.0.0.1"));

    let loopback = IpAddr::V6(String::from("::1"));
}
#+end_src

There‚Äôs another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data.

#+begin_src rust
fn main() {
    enum IpAddr {
        V4(u8, u8, u8, u8),
        V6(String),
    }

    let home = IpAddr::V4(127, 0, 0, 1);

    let loopback = IpAddr::V6(String::from("::1"));
}
#+end_src


#+begin_src rust
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
#+end_src

** Implements

There is one more similarity between enums and structs: just as we‚Äôre able to define methods on structs using impl, we‚Äôre also able to define methods on enums.
#+begin_src rust
fn main() {
    enum Message {
        Quit,
        Move { x: i32, y: i32 },
        Write(String),
        ChangeColor(i32, i32, i32),
    }

    impl Message {
        fn call(&self) {
            // method body would be defined here
        }
    }

    let m = Message::Write(String::from("hello"));
    m.call();
}
#+end_src

** The Option Enum and Its Advantages Over Null Values
Rust doesn‚Äôt have the null feature that many other languages have. Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.
#+begin_src rust
enum Option<T> {
    Some(T),
    None,
}
#+end_src

Classe OPTION:
https://doc.rust-lang.org/std/option/enum.Option.html

#+begin_src rust
fn main() {
    let some_number = Some(5);
    let some_string = Some("a string");

    let absent_number: Option<i32> = None;
}
#+end_src
** The match Control Flow Operator
#+begin_src rust
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
#+end_src
*** Patterns that Bind to Values
#+begin_src rust
#[derive(Debug)]
enum UsState {
    Alabama,
    Alaska,
    // --snip--
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        }
    }
}

fn main() {
    value_in_cents(Coin::Quarter(UsState::Alaska));
}
#+end_src

#+RESULTS:
#+begin_example
State quarter from Alaska!
#+end_example
*** Matching with Option<T>
#+begin_src rust
fn main() {
    fn plus_one(x: Option<i32>) -> Option<i32> {
        match x {
            None => None,
            Some(i) => Some(i + 1),
        }
    }

    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
}
#+end_src

*** The _ Placeholder
#+begin_src rust
fn main() {
    let some_u8_value = 0u8;
    match some_u8_value {
        1 => println!("one"),
        3 => println!("three"),
        5 => println!("five"),
        7 => println!("seven"),
        _ => (),
    }
}
#+end_src
The **()** is just the unit value, so nothing will happen in the _ case. As a result, we can say that we want to do nothing for all the possible values that we don‚Äôt list before the _ placeholder.
** Concise Control Flow with if let
#+begin_src rust
fn main() {
    let some_u8_value = Some(0u8);
    match some_u8_value {
        Some(3) => println!("three"),
        _ => (),
    }
}
#+end_src
This is the same as:
#+begin_src rust
fn main() {
    let some_u8_value = Some(0u8);
    if let Some(3) = some_u8_value {
        println!("three");
    }
}
#+end_src
The syntax if let takes a pattern and an expression separated by an equal sign. It works the same way as a match, where the expression is given to the match and the pattern is its first arm.

**Example**
- match
 #+begin_src rust
 let coin = Coin::Penny;
 let mut count = 0;
 match coin {
     Coin::Quarter(state) => println!("State quarter from {:?}!", state),
     _ => count += 1,
 }
 #+end_src

 #+begin_src rust
 let mut count = 0;
 if let Coin::Quarter(state) = coin {
     println!("State quarter from {:?}!", state);
 } else {
     count += 1;
 }
 #+end_src
* Managing Growing Projects with Packages, Crates, and Modules
** Packages and Crates
** Defining Modules to Control Scope and Privacy
> cargo new --lib restaurant;
#+begin_src rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}
#+end_src
We define a module by starting with the mod keyword and then specify the name of the module (in this case, front_of_house) and place curly brackets around the body of the module. Inside modules, we can have other modules, as in this case with the modules hosting and serving. Modules can also hold definitions for other items, such as structs, enums, constants, traits, or‚Äîas in Listing 7-1‚Äîfunctions.

#+begin_example
crate
 ‚îî‚îÄ‚îÄ front_of_house
     ‚îú‚îÄ‚îÄ hosting
     ‚îÇ   ‚îú‚îÄ‚îÄ add_to_waitlist
     ‚îÇ   ‚îî‚îÄ‚îÄ seat_at_table
     ‚îî‚îÄ‚îÄ serving
         ‚îú‚îÄ‚îÄ take_order
         ‚îú‚îÄ‚îÄ serve_order
         ‚îî‚îÄ‚îÄ take_payment
#+end_example
*** Paths for Referring to an Item in the Module Tree
#+begin_src rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}
#+end_src
This won't compile.
The error messages say that module hosting is private. In other words, we have the correct paths for the hosting module and the add_to_waitlist function, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to the private sections.
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}
#+end_src

*** Starting Relative Paths with super
We can also construct relative paths that begin in the parent module by using super at the start of the path. This is like starting a filesystem path with the .. syntax.

We can also use pub to designate structs and enums as public, but there are a few extra details. If we use pub before a struct definition, we make the struct public, but the struct‚Äôs fields will still be private. We can make each field public or not on a case-by-case basis.
#+begin_src rust
fn serve_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::serve_order();
    }

    fn cook_order() {}
}
#+end_src
*** Making Strucst and Enums Public
#+begin_src rust
mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }

    impl Breakfast {
        pub fn summer(toast: &str) -> Breakfast {
            Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast
    let mut meal = back_of_house::Breakfast::summer("Rye");
    // Change our mind about what bread we'd like
    meal.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal.toast);

    // The next line won't compile if we uncomment it; we're not allowed
    // to see or modify the seasonal fruit that comes with the meal
    // meal.seasonal_fruit = String::from("blueberries");
}
#+end_src

#+begin_src rust
mod back_of_house {
    pub enum Appetizer {
        Soup,
        Salad,
    }
}

pub fn eat_at_restaurant() {
    let order1 = back_of_house::Appetizer::Soup;
    let order2 = back_of_house::Appetizer::Salad;
}
#+end_src
** Bringing Paths into Scope with the use Keyword
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src
 or
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use self::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src

*** Creating idiomatic use Paths
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
    add_to_waitlist();
    add_to_waitlist();
}
#+end_src


#+begin_src rust
use std::fmt;
use std::io;

fn function1() -> fmt::Result {
    // --snip--
    Ok(())
}

fn function2() -> io::Result<()> {
    // --snip--
    Ok(())
}
#+end_src
*** Providing new names with the as Keyword
#+begin_src rust
use std::fmt::Result;
use std::io::Result as IoResult;

fn function1() -> Result {
    // --snip--
    Ok(())
}

fn function2() -> IoResult<()> {
    // --snip--
    Ok(())
}
#+end_src

*** Re-exporting names with pub used
#+begin_src rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src
By using pub use, external code can now call the add_to_waitlist function using hosting::add_to_waitlist. If we hadn‚Äôt specified pub use, the eat_at_restaurant function could call hosting::add_to_waitlist in its scope, but external code couldn‚Äôt take advantage of this new path.

*** Using Nested Paths to clean up latge use lists
#+begin_src rust
// --snip--
use std::cmp::Ordering;
use std::io;
// --snip--

// instead

// --snip--
use std::{cmp::Ordering, io};
// --snip--
#+end_src

#+begin_src rust
use std::io;
use std::io::Write;

// instead

use std::io::{self, Write};
#+end_src
*** The Glob Operator
#+begin_src rust
use std::collections::*;
#+end_src

** Separating Modules into different files
Filename: src/lib.rs
#+begin_src rust
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+end_src
Filename: src/front_of_house.rs
#+begin_src rust
pub mod hosting;

pub mod hosting {
    pub fn add_to_waitlist() {}
}
#+end_src

* Common Collections
Documentation
https://doc.rust-lang.org/std/collections/index.html

** Storing Lists of Values with Vectors
*** Creating a new Vector
#+begin_src rust
let v: Vec<i32> = Vec::new();
// or
let v = vec![1, 2, 3];
#+end_src
*** Updating a Vector
#+begin_src rust
let mut v = Vec::new();

v.push(5);
v.push(6);
v.push(7);
v.push(8);
#+end_src

*** Dropping a Vector Drops Its Elements
#+begin_src rust
{
    let v = vec![1, 2, 3];
    // do stuff with v
} // <- v goes out of scope and is freed here
#+end_src
*** Reading Elements of Vectors
#+begin_src rust
fn main() {
    let v = vec![1, 2, 3, 4, 5];

    let second: &i32 = &v[1];
    let third: &i32 = &v[2];
    println!("The second element is {}", second);
    println!("The third element is {}", third);

    match v.get(2) {
        Some(third) => println!("The third element is {}", third),
        None => println!("There is no third element."),
    }
}
#+end_src

#+RESULTS:
: The second element is 2
: The third element is 3
: The third element is 3
When the get method is passed an index that is outside the vector, it returns None without panicking. You would use this method if accessing an element beyond the range of the vector happens occasionally under normal circumstances. Your code will then have logic to handle having either Some(&element) or None.
*** Iterating over the Values in a Vector
#+begin_src rust
fn main() {
    let v = vec![100, 32, 57];
    for i in &v {
        println!("{}", i);
    }

    // or
    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
    }
}
#+end_src
*** Using an Enum to Store Multiple Types
#+begin_src rust
fn main() {
    enum SpreadsheetCell {
        Int(i32),
        Float(f64),
        Text(String),
    }

    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10.12),
    ];
}
#+end_src
** Storing UTF-8 Encoded Text with Strings
Rust‚Äôs standard library also includes a number of other string types, such as OsString, OsStr, CString, and CStr. Library crates can provide even more options for storing string data. See how those names all end in String or Str? They refer to owned and borrowed variants, just like the String and str types you‚Äôve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example.

*** Creating a new string
#+begin_src rust
let mut s = String::new();

let data = "initial contents";
let s = data.to_string();

// the method also works on a literal directly:
let s = "initial contents".to_string();

let s = String::from("initial contents");
#+end_src
*** Appending to a String with push_str and push
#+begin_src rust
fn main() {
    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1.push_str(s2);
    println!("s2 is {}", s2);
    println!("s1 is {}", s1);

    let mut s = String::from("foo");
    s.push_str("bar");
    println!("s is {}", s);


    let mut s = String::from("lo");
    s.push('l');
    println!("s is {}", s);

}
#+end_src

#+RESULTS:
: s2 is bar
: s1 is foobar
: s is foobar
: s is lol
*** Concatenation with + Operator or the format! Macro
#+begin_src rust
fn main() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
    println!("s is {}", s3);
}
#+end_src

#+RESULTS:
: s is Hello, world!

#+begin_src rust
fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = s1 + "-" + &s2 + "-" + &s3;
    println!("s is {}", s);
}
#+end_src

#+RESULTS:
: s is tic-tac-toe
: s is toe
: s is tac

or:
#+begin_src rust
fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = format!("{}-{}-{}", s1, s2, s3);
    println!("s is {}", s);
}
#+end_src

#+RESULTS:
: s is tic-tac-toe
: s is toe
: s is tac

This code also sets s to tic-tac-toe. The format! macro works in the same way as println!, but instead of printing the output to the screen, it returns a String with the contents. The version of the code using format! is much easier to read and doesn‚Äôt take ownership of any of its parameters.

*** Indexing into Strings
In many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, if you try to access parts of a String using indexing syntax in Rust, you‚Äôll get an error.

*** Bytes and Scalar Values and Grapheme Clusters! Oh My!
Another point about UTF-8 is that there are actually three relevant ways to look at strings from Rust‚Äôs perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call letters).


If we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it is stored as a vector of u8 values that looks like this:
#+begin_example
[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
224, 165, 135]
#+end_example

That‚Äôs 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust‚Äôs char type is, those bytes look like this:
#+begin_example
['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']
#+end_example
There are six char values here, but the fourth and sixth are not letters: they‚Äôre diacritics that don‚Äôt make sense on their own. Finally, if we look at them as grapheme clusters, we‚Äôd get what a person would call the four letters that make up the Hindi word:
#+begin_example
["‡§®", "‡§Æ", "‡§∏‡•ç", "‡§§‡•á"]
#+end_example
Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.

*** Slicing Strings
Indexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice. Therefore, Rust asks you to be more specific if you really need to use indices to create string slices. To be more specific in your indexing and indicate that you want a string slice, rather than indexing using [] with a single number, you can use [] with a range to create a string slice containing particular bytes:
#+begin_src rust
let hello = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";

let s = &hello[0..4];
#+end_src

*** Methods for Iterating Over Strings
#+begin_src rust
#![allow(unused)]
fn main() {
for c in "‡§®‡§Æ‡§∏‡•ç‡§§‡•á".chars() {
    println!("{}", c);
}
}
#+end_src

#+RESULTS:
: ‡§®
: ‡§Æ
: ‡§∏
: ‡•ç
: ‡§§
: ‡•á

#+begin_src rust
#![allow(unused)]
fn main() {
for b in "‡§®‡§Æ‡§∏‡•ç‡§§‡•á".bytes() {
    println!("{}", b);
}
}
#+end_src

#+RESULTS:
#+begin_example
224
164
# -- snip --
165
135
#+end_example

** Storing Keys with Associated Values in Hash Maps

*** Creating a new Hash map
#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);
}
#+end_src

#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let teams = vec![String::from("Blue"), String::from("Yellow")];
    let initial_scores = vec![10, 50];

    let mut scores: HashMap<String, i32> =
        teams.into_iter().zip(initial_scores.into_iter()).collect();
}
#+end_src rust
*** Hash Maps and Ownership
#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");

    let mut map = HashMap::new();
    map.insert(field_name, field_value);
    // field_name and field_value are invalid at this point, try using them and
    // see what compiler error you get!
}
#+end_src
*** Acessing Values in a Hash Map
#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    let team_name = String::from("Blue");
    let score = scores.get(&team_name);
}
#+end_src

#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    for (key, value) in &scores {
        println!("{}: {}", key, value);
    }
}
#+end_src
*** Only Inserting a Value If the Key Has No Value
It‚Äôs common to check whether a particular key has a value and, if it doesn‚Äôt, insert a value for it. Hash maps have a special API for this called entry that takes the key you want to check as a parameter. The return value of the entry method is an enum called Entry that represents a value that might or might not exist. Let‚Äôs say we want to check whether the key for the Yellow team has a value associated with it. If it doesn‚Äôt, we want to insert the value 50, and the same for the Blue team.
#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);

    scores.entry(String::from("Yellow")).or_insert(50);
    scores.entry(String::from("Blue")).or_insert(50);

    println!("{:?}", scores);
}
#+end_src

#+RESULTS:
: {"Yellow": 50, "Blue": 10}


*** Updating a Value Based on the Old Value
#+begin_src rust
fn main() {
    use std::collections::HashMap;

    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);

#+end_src

#+RESULTS:
: {"hello": 1, "wonderful": 1, "world": 2}
*** Hashing Functions
    https://en.wikipedia.org/wiki/SipHash
* Error Handling
Rust groups errors into two major categories: recoverable and unrecoverable errors.
For a recoverable error, such as a file not found error, it‚Äôs reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.

Rust doesn‚Äôt have exceptions. Instead, it has the type Result<T, E> for recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error.
** Unrecoverable Errors with panic!

 The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using cargo build or cargo run without the --release flag, as we have here.
** Recoverable Errors with Result
#+begin_src rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+end_src
*** Matching on Different Errors
#+begin_src rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error)
            }
        },
    };
}
#+end_src


That‚Äôs a lot of match! The match expression is very useful but also very much a primitive.

#+begin_src rust
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello.txt").unwrap_or_else(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create("hello.txt").unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}
#+end_src

*** Shortcuts for Panic on Error: unwrap and expect
The Result<T, E> type has many helper methods defined on it to do various tasks. One of those methods, called unwrap, is a shortcut method that is implemented just like the match expression we write on top. If the Result value is the Ok variant, unwrap will return the value inside the Ok. If the Result is the Err variant, unwrap will call the panic! macro for us.
Here is an example of unwrap in action:
#+begin_src rust
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").unwrap();
}
#+end_src

Another method, expect, which is similar to unwrap, lets us also choose the panic! error message. Using expect instead of unwrap and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of expect looks like this:
#+begin_src rust
use std::fs::File;

fn main() {
    let f = File::open("hello.txt").expect("Failed to open hello.txt");
}
#+end_src

We use expect in the same way as unwrap: to return the file handle or call the panic! macro. The error message used by expect in its call to panic! will be the parameter that we pass to expect, rather than the default panic! message that unwrap uses
*** Propagating Errors
#+begin_src rust

#![allow(unused)]
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let f = File::open("hello.txt");

    let mut f = match f {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut s = String::new();

    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
#+end_src

This function can be written in a much shorter way, but we‚Äôre going to start by doing a lot of it manually in order to explore error handling; at the end, we‚Äôll show the shorter way.

*** A Shortcut for Propagating Errors: the ? Operator
#+begin_src rust

#![allow(unused)]
fn main() {
   use std::fs::File;
   use std::io;
   use std::io::Read;

   fn read_username_from_file() -> Result<String, io::Error> {
       let mut f = File::open("hello.txt")?;
       let mut s = String::new();
       f.read_to_string(&mut s)?;
       Ok(s)
   }
}
#+end_src
The ? placed after a Result value is defined to work in almost the same way as the match expressions we defined to handle the Result values in Listing 9-6. If the value of the Result is an Ok, the value inside the Ok will get returned from this expression, and the program will continue. If the value is an Err, the Err will be returned from the whole function as if we had used the return keyword so the error value gets propagated to the calling code.

#+begin_src rust
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let mut s = String::new();
    File::open("hello.txt")?.read_to_string(&mut s)?;
    Ok(s)
}
#+end_src

Or
#+begin_src rust
use std::fs;
use std::io;

fn read_username_from_file() -> Result<String, io::Error> {
    fs::read_to_string("hello.txt")
}
#+end_src
** To panic! or Not To Panic!
So how do you decide when you should call panic! and when you should return Result? When code panics, there‚Äôs no way to recover. You could call panic! for any error situation, whether there‚Äôs a possible way to recover or not, but then you‚Äôre making the decision on behalf of the code calling your code that a situation is unrecoverable. When you choose to return a Result value, you give the calling code options rather than making the decision for it. The calling code could choose to attempt to recover in a way that‚Äôs appropriate for its situation, or it could decide that an Err value in this case is unrecoverable, so it can call panic! and turn your recoverable error into an unrecoverable one. Therefore, returning Result is a good default choice when you‚Äôre defining a function that might fail.
*** Examples, Prototype Code, and Tests
Similarly, the unwrap and expect methods are very handy when prototyping, before you‚Äôre ready to decide how to handle errors. They leave clear markers in your code for when you‚Äôre ready to make your program more robust.

If a method call fails in a test, you‚Äôd want the whole test to fail, even if that method isn‚Äôt the functionality under test. Because panic! is how a test is marked as a failure, calling unwrap or expect is exactly what should happen.
*** Cases in Which You Have More Information Than the Compiler
It would also be appropriate to call unwrap when you have some other logic that ensures the Result will have an Ok value, but the logic isn‚Äôt something the compiler understands. You‚Äôll still have a Result value that you need to handle: whatever operation you‚Äôre calling still has the possibility of failing in general, even though it‚Äôs logically impossible in your particular situation. If you can ensure by manually inspecting the code that you‚Äôll never have an Err variant, it‚Äôs perfectly acceptable to call unwrap.
*** Guidelines for Error Handling
It‚Äôs advisable to have your code panic when it‚Äôs possible that your code could end up in a bad state. In this context, a bad state is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code‚Äîplus one or more of the following:
 - The bad state is not something that‚Äôs expected to happen occasionally.
 - Your code after this point needs to rely on not being in this bad state.
 - There‚Äôs not a good way to encode this information in the types you use.
If someone calls your code and passes in values that don‚Äôt make sense, the best choice might be to call panic! and alert the person using your library to the bug in their code so they can fix it during development. Similarly, panic! is often appropriate if you‚Äôre calling external code that is out of your control and it returns an invalid state that you have no way of fixing.

However, when failure is expected, it‚Äôs more appropriate to return a Result than to make a panic! call. Examples include a parser being given malformed data or an HTTP request returning a status that indicates you have hit a rate limit. In these cases, returning a Result indicates that failure is an expected possibility that the calling code must decide how to handle.
* Generic Types, Traits, and Lifetimes
** Removing duplication by extracting a function
In the same way that you recognize duplicated code to extract into a function, you‚Äôll start to recognize duplicated code that can use generics.

#+begin_src rust
fn largest(list: &[i32]) -> i32 {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
    assert_eq!(result, 100);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
    assert_eq!(result, 6000);
}
#+end_src

#+RESULTS:
: The largest number is 100
: The largest number is 6000

** Generic Data Types
*** In Function Definitions
When defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.
#+begin_src rust
fn largest_i32(list: &[i32]) -> i32 {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn largest_char(list: &[char]) -> char {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest_i32(&number_list);
    println!("The largest number is {}", result);
    assert_eq!(result, 100);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest_char(&char_list);
    println!("The largest char is {}", result);
    assert_eq!(result, 'y');
}
#+end_src

#+RESULTS:
: The largest number is 100
: The largest char is y

To parameterize the types in the new function we‚Äôll define, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we‚Äôll use T because, by convention, parameter names in Rust are short, often just a letter, and Rust‚Äôs type-naming convention is CamelCase. Short for ‚Äútype,‚Äù T is the default choice of most Rust programmers.

 Note that this code won‚Äôt compile yet, but we‚Äôll fix it later in this chapter.

#+begin_src rust
fn largest<T>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {}", result);
}
#+end_src
The note mentions std::cmp::PartialOrd, which is a trait. We‚Äôll talk about traits in the next section. For now, this error states that the body of largest won‚Äôt work for all possible types that T could be. Because we want to compare values of type T in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the std::cmp::PartialOrd trait that you can implement on types (see Appendix C for more on this trait).
*** In Struct Definitions
#+begin_src rust
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1.0, y: 4.0 };
}
#+end_src

#+begin_src rust
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 5, y: 10 };
    let both_float = Point { x: 1.0, y: 4.0 };
    let integer_and_float = Point { x: 5, y: 4.0 };
}
#+end_src

*** In Enum Definitions
#+begin_src rust
enum Option<T> {
    Some(T),
    None,
}

enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+end_src
*** In Method Definitions
#+begin_src rust
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

fn main() {
    let p = Point { x: 5, y: 10 };

    println!("p.x = {}", p.x());
}
#+end_src

We could, for example, implement methods only on Point<f32> instances rather than on Point<T> instances with any generic type. In Listing 10-10 we use the concrete type f32, meaning we don‚Äôt declare any types after impl.

#+begin_src rust
impl Point<f32> {
    fn distance_from_origin(&self) -> f32 {
        (self.x.powi(2) + self.y.powi(2)).sqrt()
    }
}
#+end_src

This code means the type Point<f32> will have a method named distance_from_origin and other instances of Point<T> where T is not of type f32 will not have this method defined.

Generic type parameters in a struct definition aren‚Äôt always the same as those you use in that struct‚Äôs method signatures.

#+begin_src rust
struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y,
        }
    }
}

fn main() {
    let p1 = Point { x: 5, y: 10.4 };
    let p2 = Point { x: "Hello", y: 'c' };

    let p3 = p1.mixup(p2);

    println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
}
#+end_src

#+RESULTS:
: p3.x = 5, p3.y = c

*** Performance of Code Using Generics
You might be wondering whether there is a runtime cost when you‚Äôre using generic type parameters. The good news is that Rust implements generics in such a way that your code doesn‚Äôt run any slower using generic types than it would with concrete types.

Rust accomplishes this by performing monomorphization of the code that is using generics at compile time. Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.

Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust‚Äôs generics extremely efficient at runtime.
** Traits: Defining Shared Behavior
*** Defining a Trait
#+begin_src rust
pub trait Summary {
    fn summarize(&self) -> String;
}
#+end_src

Here, we declare a trait using the trait keyword and then the trait‚Äôs name, which is Summary in this case. Inside the curly brackets, we declare the method signatures that describe the behaviors of the types that implement this trait, which in this case is fn summarize(&self) -> String.
*** Implementing a Trait on a Type
#+begin_src rust
pub trait Summary {
    fn summarize(&self) -> String;
}

pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, self.content)
    }
}

fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet:\n {}", tweet.summarize());
}

#+end_src

#+RESULTS:
: 1 new tweet:
:  horse_ebooks: of course, as you probably already know, people

*** Default Implementations
Sometimes it‚Äôs useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type. Then, as we implement the trait on a particular type, we can keep or override each method‚Äôs default behavior.
#+begin_src rust
pub trait Summary {
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}
#+end_src
*** Traits as Parameters
Now that you know how to define and implement traits, we can explore how to use traits to define functions that accept many different types.
#+begin_src rust
pub fn notify(item: &impl Summary) {
    println!("Breaking news! {}", item.summarize());
}
#+end_src

Instead of a concrete type for the item parameter, we specify the impl keyword and the trait name. This parameter accepts any type that implements the specified trait. In the body of notify, we can call any methods on item that come from the Summary trait, such as summarize. We can call notify and pass in any instance of NewsArticle or Tweet. Code that calls the function with any other type, such as a String or an i32, won‚Äôt compile because those types don‚Äôt implement Summary.

*** Trait Bound Syntax
The impl Trait syntax works for straightforward cases but is actually syntax sugar for a longer form, which is called a trait bound; it looks like this:
#+begin_src rust
pub fn notify<T: Summary>(item: &T) {
    println!("Breaking news! {}", item.summarize());
}
#+end_src

The impl Trait syntax is convenient and makes for more concise code in simple cases. The trait bound syntax can express more complexity in other cases. For example, we can have two parameters that implement Summary. Using the impl Trait syntax looks like this:
#+begin_src rust
pub fn notify(item1: &impl Summary, item2: &impl Summary) #+end_src
#+end_src

If we wanted this function to allow item1 and item2 to have different types, using impl Trait would be appropriate (as long as both types implement Summary). If we wanted to force both parameters to have the same type, that‚Äôs only possible to express using a trait bound, like this:

#+begin_src rust
pub fn notify<T: Summary>(item1: &T, item2: &T)
#+end_src

*** Specifying Multiple Trait Bounds with the + Syntax
We can also specify more than one trait bound. Say we wanted notify to use display formatting on item as well as the summarize method: we specify in the notify definition that item must implement both Display and Summary. We can do so using the + syntax:

#+begin_src rust
pub fn notify(item: &(impl Summary + Display))

// or

pub fn notify<T: Summary + Display>(item: &T)
#+end_src
*** Clearer Trait Bounds with where Clauses

For this reason, Rust has alternate syntax for specifying trait bounds inside a where clause after the function signature. So instead of writing this:

#+begin_src rust
fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {
    ...
}
#+end_src

we can use a where clause, like this:

#+begin_src rust
fn some_function<T, U>(t: &T, u: &U) -> i32
    where T: Display + Clone,
          U: Clone + Debug
{
    ...
}
#+end_src
*** Returning Types that Implement Traits
#+begin_src rust
fn returns_summarizable() -> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    }
}
#+end_src
By using impl Summary for the return type, we specify that the returns_summarizable function returns some type that implements the Summary trait without naming the concrete type. In this case, returns_summarizable returns a Tweet, but the code calling this function doesn‚Äôt know that.

* Some notes
** Documentation provided by all of dependencies locally
  You won‚Äôt just know which traits to use and which methods and functions to call from a crate. Instructions for using a crate are in each crate‚Äôs documentation. Another neat feature of Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies locally and open it in your browser. If you‚Äôre interested in other functionality in the rand crate, for example, run cargo doc --open and click rand in the sidebar on the left.
* Documenation:
- [[https://doc.rust-lang.org/std/option/enum.Option.html][Classe OPTION]]
- [[https://doc.rust-lang.org/std/collections/index.html][Common Collections]]
- [[https://doc.rust-lang.org/rust-by-example/trait.html][Trait]]
